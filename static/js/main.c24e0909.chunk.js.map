{"version":3,"sources":["components/ProgressBar.js","App.js","reportWebVitals.js","index.js"],"names":["ProgressBar","props","useState","circleRef","useRef","label","time","progress","size","strokeWidth","circleOneStroke","circleTwoStroke","center","radius","circumference","Math","PI","rotation","className","width","height","stroke","cx","cy","r","ref","strokeDasharray","strokeDashoffset","transform","id","x","y","App","state","breakLength","sessionLength","secLeft","timerLabel","status","handleSetting","bind","handleStart","handleReset","secToMinSec","calcProgress","startClock","stopClock","tick","timeOut","e","this","target","setState","document","getElementById","pause","currentTime","int","floor","toString","padStart","round","timerID","setInterval","clearInterval","left","play","min","documentElement","clientWidth","onClick","class","preload","src","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c24e0909.chunk.js","sourcesContent":["import React, {useEffect, useState, useRef} from 'react';\nimport './ProgressBar.css';\n \n\nconst ProgressBar = (props) => {\n    const [offset, setOffset] = useState(0);\n    const circleRef = useRef(null);\n    const {\n        label,\n        time,\n        progress,\n        size,\n        strokeWidth,\n        circleOneStroke,\n        circleTwoStroke,\n    } = props;\n\n    const center = size/2;\n    const radius = center - strokeWidth/2;\n    const circumference = 2 * Math.PI * radius;\n    const rotation = 'rotate(-90 ' + center + ' ' + center + ')'\n\n\n  \n\n    return(\n        <>\n  \n            <svg className=\"svg\" width={size} height={size}>\n                <circle\n                    className=\"svg-circle-bg\"\n                    stroke={circleOneStroke}\n                    cx={center}\n                    cy={center}\n                    r={radius}\n                    strokeWidth={strokeWidth}\n                />\n                <circle\n                    className=\"svg-circle-bg\"\n                    ref={circleRef}\n                    stroke={circleTwoStroke}\n                    cx={center}\n                    cy={center}\n                    r={radius}\n                    strokeWidth={strokeWidth}\n                    strokeDasharray={circumference}\n                    strokeDashoffset={((100 - progress)/100)*circumference}\n                    transform={rotation}\n                />\n                <text id='timer-label' className=\"svg-circle-text\" x={center} y={center-40}>\n                  {label}\n                </text>\n                <text id='time-left' className=\"svg-circle-text\" x={center} y={center+40}>\n                  {time}\n                </text>\n  \n            </svg>\n  \n        </>\n    );\n  }\n\n\nexport default ProgressBar;","import React from 'react';\nimport './App.css';\nimport ProgressBar from './components/ProgressBar';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      secLeft: 1500,\n      timerLabel: 'Session',\n      status: 'stopped'\n    }\n\n    this.handleSetting = this.handleSetting.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.secToMinSec = this.secToMinSec.bind(this);\n    this.calcProgress = this.calcProgress.bind(this);\n    this.startClock = this.startClock.bind(this);\n    this.stopClock = this.stopClock.bind(this);\n    this.tick = this.tick.bind(this);\n    this.timeOut = this.timeOut.bind(this);\n\n  }\n\n  handleSetting(e) {\n\n    if(this.state.status==='running'){return;}\n    \n    switch(e.target.id) {\n      case 'break-decrement':\n        if (this.state.breakLength!==1) {\n        this.setState({\n          breakLength: this.state.breakLength-1\n        });}\n        break;\n      case 'break-increment':\n        if (this.state.breakLength!==60) {\n        this.setState({\n          breakLength: this.state.breakLength+1\n        });}\n        break;\n      case 'session-decrement':\n        if (this.state.sessionLength!==1) {\n        this.setState({\n          sessionLength: this.state.sessionLength-1,\n          secLeft: (this.state.sessionLength-1)*60\n        });}\n        break;\n      case 'session-increment':\n        if (this.state.sessionLength!==60) {\n        this.setState({\n          sessionLength: this.state.sessionLength+1,\n          secLeft: (this.state.sessionLength+1)*60\n        });}\n        break;\n      default:\n        break;\n    };\n  }\n  handleStart() {\n    switch(this.state.status) {\n      case 'stopped':\n      case 'paused':\n        this.setState({\n          status: 'running'\n        })\n        this.startClock();\n        break;\n      case 'running':\n        this.setState({\n          status: 'paused'\n        })\n        this.stopClock();\n        break;\n      default:\n        break;\n    }\n  }\n\n  handleReset() {\n    this.stopClock();\n    this.setState({\n      breakLength: 5,\n      sessionLength: 25,\n      secLeft: 1500,\n      timerLabel: 'Session',\n      status: 'stopped',\n      progress : 0\n    });\n    document.getElementById('beep').pause();\n    document.getElementById('beep').currentTime = 0;\n  }\n\n  secToMinSec(int) {\n    if(int<0){return('00:00')};\n    let min = Math.floor(int/60).toString().padStart(2, '0');\n    let sec = (int%60).toString().padStart(2, '0');\n    return(min+':'+sec);\n  }\n\n  calcProgress(int) {\n    if(this.state.timerLabel === 'Session') {\n      return ( Math.round((this.state.sessionLength*60 - int) / (this.state.sessionLength*60) *10000)/100 );\n    } else if (this.state.timerLabel === 'Break') {\n      return ( Math.round((this.state.breakLength*60 - int) / (this.state.breakLength*60) *10000)/100 );\n    } else {\n      return 0;\n    };\n  }\n\n  startClock() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  stopClock() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    let left = this.state.secLeft-1\n    this.setState({\n      secLeft: left\n    });\n    if(this.state.secLeft<0){\n      this.timeOut()\n    };\n  }\n\n  timeOut(){\n    /* 1. buzzer  2. stop clock   3. switch phase and reset timer  4.startclock */\n    document.getElementById('beep').play();\n    this.stopClock();\n    if(this.state.timerLabel==='Session'){\n      this.setState({\n        timerLabel: 'Break',\n        secLeft: this.state.breakLength*60\n      });\n    } else {\n      this.setState({\n        timerLabel: 'Session',\n        secLeft: this.state.sessionLength*60\n      });\n    };\n    this.startClock();\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App flex-col\">\n        \n        <div className='' id='title'>\n          <h1>Pomodoro Clock</h1>\n        </div>\n\n        <ProgressBar \n          label={this.state.timerLabel}\n          time={this.secToMinSec(this.state.secLeft)}\n          progress={this.calcProgress(this.state.secLeft)}\n          size={Math.min(document.documentElement.clientWidth*0.8, 250)}\n          strokeWidth={6}\n          circleOneStroke={this.state.timerLabel==='Break' ? '#0ca6df' : '#df450c'}\n          circleTwoStroke='#505a6a'\n        />\n\n        {/* FOR CODEPEN */}\n        {/*\n          <div className='clock flex-col' style={{gap: 10}}>\n          <div style={{margin: 0}}>\n                <text id='timer-label' className=\"svg-circle-text\">\n                      {this.state.timerLabel}\n                </text>\n            </div>\n            <div style={{margin: 0}}>\n                <text id='time-left' className=\"svg-circle-text\" style={this.state.timerLabel==='Break' ? {color: \"#0ca6df\"} : {color: \"#df450c\"}}>\n                      {this.secToMinSec(this.state.secLeft)}\n                </text>\n            </div>\n            </div>\n        */}\n  \n\n        <div className='flex-row' id='controls'>\n          <div className='clock-control' onClick={this.handleStart} id='start_stop'>{this.state.status==='running' ? <i class=\"fas fa-pause-circle fa-2x\"></i> : <i class=\"fas fa-play-circle fa-2x\"></i>}</div>\n          <div className='clock-control' onClick={this.handleReset} id='reset'><i class=\"fas fa-times-circle fa-2x\"></i></div>\n          <audio id='beep' preload='auto' src='https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav' />\n        </div>\n\n        <div className='flex-row' id='settings'>\n\n          <div className='flex-col setting-box' id='settings-break'>\n            <p className='setting-label' id='break-label'>Break Length</p>\n            <div className='flex-row setting-dial'>\n              <i className='setting-button' onClick={this.handleSetting} id='break-decrement' class=\"fas fa-minus-circle fa-lg\"></i>\n              <p className='setting-value' id='break-length'>{this.state.breakLength}</p>\n              <i className='setting-button' onClick={this.handleSetting} id='break-increment' class=\"fas fa-plus-circle fa-lg\"></i>\n            </div>\n          </div>\n  \n          <div className='flex-col setting-box' id='settings-session'>\n            <p className='setting-label' id='session-label'>Session Length</p>\n            <div className='flex-row setting-dial'>\n              <i className='setting-button' onClick={this.handleSetting} id='session-decrement' class=\"fas fa-minus-circle fa-lg\"></i>\n              <p className='setting-value' id='session-length'>{this.state.sessionLength}</p>\n              <i className='setting-button' onClick={this.handleSetting} id='session-increment' class=\"fas fa-plus-circle fa-lg\"></i>\n            </div>\n          </div>\n\n        </div>\n  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}